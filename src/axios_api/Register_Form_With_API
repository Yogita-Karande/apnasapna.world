import { useState } from "react";
import { Button, Card, Col, Container, Form, Row } from "react-bootstrap";
import { NavLink } from "react-router-dom";
import { selectDistrict } from './State-and-District-Selection';
// import usedispath
// import signUpUser
import { getDOB } from "./DOB-handle";

function Register() {

    const data = { name: "", referal: "", email: "", address: '', number: "", state: "", gender: "", district: "", dob: "", city: "" }
    const [formData, setformData] = useState(data)
    const [isSubmit, setisSubmit] = useState(false)
    // const dispatch = useDispatch()
    // const states = dispatch(getStates())
    // console.log(states)
    // const state = useSelector((state) => state);
    // console.log(state)

    const [formErrors, setformErrors] = useState({})
    const handleSubmit = (e) => {
        e.preventDefault();

        // setformErrors(validate(formData));
        setisSubmit(true);
        // dispatch(signUpUser(signUpUser))
    }

    const validate = (values) => {
        const errors = {};
        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

        if (!values.name) {
            errors.name = "This field is required";
        }

        if (!values.referal) {
            errors.referal = "This field is required";
        }

        if (!values.email) {
            errors.email = "This field is required";
        }

        if (!values.address) {
            errors.address = "This field is required";
        }

        if (!values.number) {
            errors.number = "This field is required";
        }

        if (!values.state) {
            errors.state = "This field is required";
        }

        if (!values.gender) {
            errors.gender = "This field is required";
        }

        if (!values.district) {
            errors.district = "This field is required";
        }

        if (!values.dob) {
            errors.dob = "This field is required";
        }

        if (!values.city) {
            errors.city = "This field is required";
        }
        return errors;
    };


    const handleData = (e) => {
        setformData({ ...formData, [e.target.name]: e.target.value })
    }

    //  use useDispatch



    const registerHandle = () => {
        // console.log(formData)
        //  pass body 
        // dispatch(signUpUser(getPageContent))
        // console.log(getPageContent)
    }

    return (
        <Container>
            <Row>
                <Col className="mt-5">
                    <h1 className="text-orange text-center fs-2 fw-bold">REGISTER</h1>
                    <Card className="rounded col-lg-6 mx-auto mt-lg-5">
                        <Card.Body>
                            <Form>
                                <Row>
                                    <Col>
                                        <Form.Group controlId="exampleForm.ControlInput1">
                                            <Form.Control type="text" placeholder="Name" name="name" value={formData.name} onChange={handleData} />
                                            <p className='text-danger'>{formErrors.name}</p>
                                        </Form.Group>
                                    </Col>

                                    <Col>
                                        <Form.Group controlId="exampleForm.ControlInput2">
                                            <Form.Control type="text" placeholder="Referal" name="referal" value={formData.referal} onChange={handleData} />
                                            <p className='text-danger'>{formErrors.referal}</p>
                                        </Form.Group>
                                    </Col>
                                </Row>

                                <Row>
                                    <Col>
                                        <Form.Group controlId="exampleForm.ControlInput3">
                                            <Form.Control type="text" placeholder="Email" name="email" value={formData.email} onChange={handleData} />
                                            <p className='text-danger'>{formErrors.email}</p>
                                        </Form.Group>
                                    </Col>

                                    <Col>
                                        <Form.Group controlId="exampleForm.ControlInput3">
                                            <Form.Control type="text" placeholder="Address" name="address" value={formData.address} onChange={handleData} />
                                            <p className='text-danger'>{formErrors.address}</p>
                                        </Form.Group>
                                    </Col>
                                </Row>

                                <Row>
                                    <Col>
                                        <Form.Group controlId="exampleForm.ControlInput3">
                                            <Form.Control type="text" placeholder="Mobile Number" name="number" value={formData.number} onChange={handleData} />
                                            <p className='text-danger'>{formErrors.number}</p>
                                        </Form.Group>
                                    </Col>

                                    <Col>
                                        <Form.Select className="text-muted" name="state" value={formData.state} onChange={handleData} >
                                            <option>Select State</option>
                                            {/* {states.map((item,index) => (
                                    <option key={index} value={index}>{item.value}</option>
                                    
                                    ))} */}
                                        </Form.Select>

                                        <p className='text-danger'>{formErrors.state}</p>
                                    </Col>
                                </Row>

                                <Row>
                                    <Col>
                                        <Form.Select className="text-muted" name="gender" value={formData.gender} onChange={handleData}>
                                            <option>Gender</option>
                                            <option>Male</option>
                                            <option>Female</option>
                                            <option>Other</option>

                                        </Form.Select>
                                        <p className='text-danger'>{formErrors.gender}</p>
                                    </Col>

                                    <Col>
                                        <Form.Select className="text-muted" name="district" value={formData.district} onChange={handleData}>
                                            <option>Select District</option>
                                            {selectDistrict.map((item, index) => (
                                                <option key={index} >{item.district}</option>
                                            ))}
                                        </Form.Select>
                                        <p className='text-danger'>{formErrors.district}</p>
                                    </Col>
                                </Row>

                                <Row>
                                    <Col>
                                        <Form.Group className="mb-3" controlId="exampleForm.ControlInput3">
                                            <Form.Control type="date" placeholder="DOB" name="dob" value={formData.dob} onChange={handleData} max={getDOB()} />
                                            <p className='text-danger'>{formErrors.dob}</p>
                                        </Form.Group>
                                    </Col>

                                    <Col>
                                        <Form.Select className="text-muted" name="city" value={formData.city} onChange={handleData}>
                                            <option>Select City</option>
                                            {selectDistrict.map((item, index) => (
                                                <option key={index} >{item.district}</option>
                                            ))}
                                        </Form.Select>
                                        <p className='text-danger'>{formErrors.city}</p>
                                    </Col>
                                </Row>

                                <Row>
                                    <Col className="d-flex">
                                        <Form.Check />
                                        <NavLink className="nav-link text-muted ms-2" to="/terms-and-conditions">Accept terms & conditions.</NavLink>
                                    </Col>
                                </Row>

                                <Row>
                                    <Col className="text-center mt-4">
                                        <Button className="bg-orange" onSubmit={registerHandle} onClick={handleSubmit}>Submit</Button>
                                    </Col>
                                </Row>
                            </Form>
                        </Card.Body>
                    </Card>
                </Col>
            </Row>
        </Container>
    )
}

export default Register;
